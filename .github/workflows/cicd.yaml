# CICD using GitHub actions

name: CI/CD

on:
  push:
    branches:
      - main

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Go 1.22
      uses: actions/setup-go@v2
      with:
        go-version: 1.22

    - name: Build
      run: go build -o go-web-app

    - name: Test
      run: go test ./...
  
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Go 1.22
      uses: actions/setup-go@v2
      with:
        go-version: 1.22

    - name: Install golangci-lint
      run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.40.1

    - name: Lint
      run: golangci-lint run
  
  sonarqube:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Go 1.22
      uses: actions/setup-go@v2
      with:
        go-version: 1.22

    - name: Install SonarQube Scanner
      run: |
        sudo apt-get install -y openjdk-18-jre
        export SONAR_SCANNER_VERSION=4.6.2.2472
        curl -sSLo /tmp/sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
        sudo unzip -d /opt /tmp/sonar-scanner-cli.zip
        sudo ln -s /opt/sonar-scanner-$SONAR_SCANNER_VERSION-linux /opt/sonar-scanner
        export PATH=$PATH:/opt/sonar-scanner/bin
        sonar-scanner -v

    - name: SonarQube Scan
      run: |
        sonar-scanner \
          -Dsonar.projectKey=go-web-app \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ secrets.SONARQUBE_URL }} \
          -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}
  
  push:
    runs-on: ubuntu-latest

    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Build and push
      run: |
        docker buildx build --platform linux/amd64,linux/arm64 -t abhishekf5/go-web-app:latest .
        docker buildx build --platform linux/amd64,linux/arm64 -t abhishekf5/go-web-app:latest .
        docker push abhishekf5/go-web-app:latest

  deploy:
    runs-on: ubuntu-latest

    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up kubectl
      uses: azure/k8s-set-context@v1
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}

    - name: Deploy to Kubernetes
      run: kubectl apply -f k8s/manifests/

